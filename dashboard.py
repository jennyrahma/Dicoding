# -*- coding: utf-8 -*-
"""Dashboard

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X-o7UtMPChCSWM5ZCsCC7_fKAPprPasU

# Proyek Analisis Data: [Bike Sharing Dataset]
- **Nama:** [Jenny Rahma Hidaya]
- **Email:** [m191b4kx2057@bangkit.academy]
- **ID Dicoding:** [jennyrhmaa]

## Menentukan Pertanyaan Bisnis

- Pertanyaan 1 : Apa faktor yang paling mempengaruhi jumlah penyewaan sepeda per hari?
- Pertanyaan 2 : Bagaimana pola penggunaan sepeda berdasarkan waktu (musim, bulan, hari)?

## Import Semua Packages/Library yang Digunakan
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st

"""## Data Wrangling

### Gathering Data
"""

day_df = pd.read_csv('day.csv')
day_df.head()

hour_df = pd.read_csv('hour.csv')

hour_df.head()

"""**Insight:**
- Dataset terdiri dari beberapa file: day.csv dan hour.csv.
- Variabel kunci yang perlu diperhatikan adalah cnt (jumlah penyewaan), temp (suhu), season (musim), hum (kelembapan), dan windspeed (kecepatan angin).

### Assessing Data
"""

day_df.isna().sum()

print("Jumlah duplikasi: ", day_df.duplicated().sum())

day_df.describe()

plt.figure(figsize=(8,6))
sns.boxplot(x=day_df['cnt'])
plt.title('Distribusi Penyewaan Sepeda (cnt)')
plt.show()

hour_df.info()

print("Jumlah duplikasi: ",hour_df.duplicated().sum())
hour_df.describe()

"""**Insight:**
- Dataset tidak memiliki nilai yang hilang, namun terdapat beberapa outlier yang perlu diperhatikan dalam analisis lanjutan.
- Variabel seperti season dan workingday adalah variabel kategorikal yang mungkin perlu dikonversi menjadi tipe yang sesuai untuk analisis.

### Cleaning Data
"""

day_df['dteday'] = pd.to_datetime(day_df['dteday'])

for column in ['temp', 'atemp', 'hum', 'windspeed']:
    q1 = day_df[column].quantile(0.25)
    q3 = day_df[column].quantile(0.75)
    iqr = q3 - q1
    lower_bound = q1 - 1.5 * iqr
    upper_bound = q3 + 1.5 * iqr
    day_df = day_df[(day_df[column] >= lower_bound) & (day_df[column] <= upper_bound)]

for column in ['season', 'mnth', 'yr', 'weathersit']:
    day_df[column] = day_df[column].astype('category')

print(day_df.info(memory_usage='deep'))

day_df.to_csv('cleaned_data.csv', index=False)

Q1 = day_df['casual'].quantile(0.25)
Q3 = day_df['casual'].quantile(0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR
# Menghapus outlier
day_df_cleaned = day_df[(day_df['casual'] >= lower_bound) & (day_df['casual'] <= upper_bound)]

sns.histplot(day_df['cnt'], kde=True)
plt.title('Distribusi Jumlah Pengguna Bike Sharing')
plt.show()

missing_values = day_df.isnull().sum()
print(missing_values)

day_df['season'] = day_df['season'].astype('category')
day_df['weekday'] = day_df['weekday'].astype('category')
day_df['month'] = day_df['mnth'].astype('category')

hour_df['dteday'] = pd.to_datetime(hour_df['dteday'])

categorical_cols = ['season', 'yr', 'mnth', 'hr', 'holiday', 'weekday', 'workingday', 'weathersit']
for col in categorical_cols:
    hour_df[col] = hour_df[col].astype('category')

hour_df.drop(columns=['instant'], inplace=True)  # Hapus kolom instant jika tidak diperlukan

print(hour_df['season'].value_counts())
print(hour_df['weathersit'].value_counts())

# Mengonversi kolom kategorikal
hour_df['season'] = hour_df['season'].astype('category')
hour_df['yr'] = hour_df['yr'].astype('category')
hour_df['mnth'] = hour_df['mnth'].astype('category')
hour_df['weathersit'] = hour_df['weathersit'].astype('category')

# Memeriksa statistik deskriptif
print(hour_df[['cnt', 'casual', 'registered']].describe())

# Menghapus outlier
Q1 = hour_df['cnt'].quantile(0.25)
Q3 = hour_df['cnt'].quantile(0.75)
IQR = Q3 - Q1
hour_df = hour_df[(hour_df['cnt'] >= (Q1 - 1.5 * IQR)) & (hour_df['cnt'] <= (Q3 + 1.5 * IQR))]

# Memeriksa nilai minimal dan maksimal
print(hour_df[['windspeed', 'temp', 'atemp']].describe())

# Mendefinisikan ulang nilai kategorikal
season_mapping = {1: 'Winter', 2: 'Spring', 3: 'Summer', 4: 'Fall'}
hour_df['season'] = hour_df['season'].map(season_mapping)

# Memisahkan kolom
numerical_cols = hour_df.select_dtypes(include=['float64', 'int64']).columns.tolist()
categorical_cols = hour_df.select_dtypes(include=['category']).columns.tolist()

print("Numerical Columns:", numerical_cols)
print("Categorical Columns:", categorical_cols)

"""**Insight:**
- xxx
- xxx

## Exploratory Data Analysis (EDA)

### Explore ...
"""

day_df.describe(include="all")

# Group by season, year, and month
grouped = day_df.groupby(['season', 'yr'], observed=False).agg(
    total_cnt=('cnt', 'sum'),
    total_casual=('casual', 'sum'),
    total_registered=('registered', 'sum'),
    average_temp=('temp', 'mean'),
    average_hum=('hum', 'mean'),
    average_windspeed=('windspeed', 'mean')
).reset_index()

# Menampilkan hasil group by
print(grouped)

# Visualisasi distribusi penyewaan sepeda berdasarkan musim
plt.figure(figsize=(10,6))
sns.boxplot(x='season', y='cnt', data=day_df)
plt.title('Distribusi Penyewaan Sepeda Berdasarkan Musim')
plt.xlabel('Musim')
plt.ylabel('Jumlah Penyewaan')
plt.show()

# Visualisasi hubungan antara suhu dan penyewaan sepeda
plt.figure(figsize=(15,7))
sns.scatterplot(x='temp', y='cnt', data=day_df)
plt.title('Hubungan Suhu dan Penyewaan Sepeda')
plt.xlabel('Suhu (°C)')
plt.ylabel('Jumlah Penyewaan')
plt.show()

hour_df.describe(include="all")

# Group by season, year, and month for hour_df
grouped_hour = hour_df.groupby(['season', 'yr', 'mnth'], observed=False).agg(
    total_cnt=('cnt', 'sum'),
    total_casual=('casual', 'sum'),
    total_registered=('registered', 'sum'),
    average_temp=('temp', 'mean'),
    average_hum=('hum', 'mean'),
    average_windspeed=('windspeed', 'mean')
).reset_index()

# Menampilkan hasil group by
print(grouped_hour)

# Visualisasi distribusi penyewaan sepeda berdasarkan musim
plt.figure(figsize=(10,6))
sns.boxplot(x='season', y='cnt', data=hour_df)
plt.title('Distribusi Penyewaan Sepeda Berdasarkan Musim')
plt.xlabel('Musim')
plt.ylabel('Jumlah Penyewaan')
plt.show()

# Visualisasi hubungan antara suhu dan penyewaan sepeda
plt.figure(figsize=(15,7))
sns.scatterplot(x='temp', y='cnt', data=hour_df)
plt.title('Hubungan Suhu dan Penyewaan Sepeda')
plt.xlabel('Suhu (°C)')
plt.ylabel('Jumlah Penyewaan')
plt.show()

"""**Insight:**
Terdapat hubungan positif antara suhu dan jumlah penyewaan sepeda. Penyewaan cenderung meningkat seiring dengan naiknya suhu.

## Visualization & Explanatory Analysis

### Pertanyaan 1:
"""

# Menghitung korelasi
correlation = day_df[['atemp', 'hum', 'windspeed', 'cnt']].corr()

# Visualisasi korelasi
plt.figure(figsize=(8,6))
sns.heatmap(correlation, annot=True, cmap='coolwarm')
plt.title('Korelasi antara Variabel Cuaca dan Penyewaan Sepeda')
plt.show()

"""### Pertanyaan 2:"""

# Visualisasi tren penggunaan sepeda sepanjang waktu
hour_df['mnth'] = pd.to_datetime(hour_df['dteday']).dt.month

plt.figure(figsize=(10,6))
sns.lineplot(x='mnth', y='cnt', data=hour_df)
plt.title('Tren Penyewaan Sepeda per Bulan')
plt.xlabel('Bulan')
plt.ylabel('Jumlah Penyewaan')
plt.show()

"""**Insight:**
- Pertanyaan 1:
a. Suhu (temp) memiliki korelasi positif yang kuat dengan jumlah penyewaan sepeda.
b. Kelembapan (humidity) dan kecepatan angin (windspeed) memiliki korelasi negatif yang lebih lemah.
- Pertanyaan 2:
Penyewaan sepeda cenderung meningkat pada bulan-bulan musim panas (Juni, Juli, Agustus), dengan puncak penggunaan di bulan Juli.

## Analisis Lanjutan (Opsional)
"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Fitur dan target
X = day_df[['temp', 'hum', 'windspeed']]
y = day_df['cnt']

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Membuat model regresi linier
model = LinearRegression()
model.fit(X_train, y_train)

# Prediksi
y_pred = model.predict(X_test)

# Menghitung error
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

"""## Conclusion

- Conclution pertanyaan 1: Suhu adalah faktor yang paling berpengaruh terhadap jumlah penyewaan sepeda, sementara kelembapan dan kecepatan angin memiliki pengaruh yang lebih kecil.
- Conclution pertanyaan 2: Pola penggunaan sepeda menunjukkan peningkatan pada bulan-bulan musim panas, dengan puncaknya pada bulan Juli.
"""

# Misalkan Anda memiliki tiga DataFrame
data1 = day_df
data2 = hour_df

df1 = pd.DataFrame(data1)
df2 = pd.DataFrame(data2)

# Menggabungkan DataFrame
all_df = pd.concat([df1, df2], ignore_index=True)

# Menyimpan ke CSV
all_df.to_csv("all_data.csv", index=False)

all_df.to_csv("all_data.csv", index=False)

!pip install streamlit babel

!pip freeze requirements.txt

# Menulis ke file requirements.txt
with open('requirements.txt', 'w') as f:
    f.write('pandas\n')
    f.write('numpy\n')
    f.write('matplotlib\n')
    f.write('seaborn\n')
    f.write('streamlit\n')
